use std::fs::File;
use std::io::Write;
use std::path::Path;
use std::sync::{Arc, Mutex};
use prologue_logger::{Entry, Task};

struct FileLogger {
    level: log::LevelFilter,
    file: Arc<Mutex<File>>
}
impl log::Log for FileLogger {
    fn enabled(&self, metadata: &log::Metadata) -> bool {
        metadata.level() <= self.level
    }

    fn log(&self, record: &log::Record) {
        if self.enabled(record.metadata()) {
            let mut file = self.file.lock().unwrap();
            let contents = format!("{}", record.args());
            file.write(contents.as_bytes()).unwrap();
        }
    }

    fn flush(&self) {
        self.file.lock().unwrap().flush().unwrap()
    }
}
impl FileLogger {
    pub fn new<P: AsRef<Path>>(filename: P) -> std::io::Result<FileLogger> {
        let level = log::LevelFilter::Debug;
        let file = File::create(filename)?;
        let file = Arc::new(Mutex::new(file));
        Ok(FileLogger { level, file })
    }

    pub fn register(self) -> Result<(), log::SetLoggerError> {
        log::set_max_level(self.level);
        log::set_boxed_logger(Box::new(self))
    }
}

fn main() -> prologue_logger::error::Result<()> {
    FileLogger::new("file.log")
        .unwrap()
        .register()
        .unwrap();

    Entry::new_warning("starting `file.rs` -- the following is NOT generated by `cargo`")
        .log("file");
    Task::new("Running", "example `file.rs`")
        .log("file");
    Entry::new_warning("this is a warning line")
        .named_source("examples/file.rs", 8, 36)
        .new_line(8, "    let entry = Entry::new_warning(\"this is a warning line\")")
        .annotate_help(9, 5, "this is the variable")?
        .annotate_help(17, 18, "this is the invoking function")?
        .annotate_note(36, 24, "this is the text")?
        .new_line(9, "    .bright()")
        .new_line(10, "    .source(source)")
        .new_line(11, "    .forward_to_stderr();")
        .annotate_warn(6, 17, "this function does not increase the warning count")?
        .note("this is not the actual source code")
        .help("to see the actual source code for this example,\nsee `examples/file.rs`")
        .note("this output is generated by `prologue-logger` and NOT by `cargo`")
        .finish()
        .log("file");

    Ok(())
}